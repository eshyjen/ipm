<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
	xmlns:p="http://www.springframework.org/schema/p" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="false" use-expressions="true"
			entry-point-ref="authenticationEntryPoint" >
	
		<!-- disallow any direct jsp access -->
		<security:intercept-url pattern="/index.jsp" access="permitAll" />
		<security:intercept-url pattern="/**/*.jsp" access="denyAll" />
		<security:intercept-url pattern="/v1/protected/**" access="hasRole('ROLE_SYSADMIN')" requires-channel="http" />
		<security:intercept-url pattern="/v1/protected/manager/**" access="hasRole('ROLE_MANAGER')" />
		<security:intercept-url pattern="/v1/protected/**" access="hasAnyRole('ROLE_MANAGER,ROLE_USER')" />
		<security:intercept-url pattern="/**/*.html" access="permitAll" />
		
		<!--  	
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/loginForm.action" 
				logout-url="/krams/auth/logout"/>
		-->
		<security:custom-filter ref="blacklistFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
		<security:custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>
		<security:custom-filter ref="logoutFilter" position="LOGOUT_FILTER"/>
		<!-- enable csrf protection 
		<security:csrf /> -->
	</security:http>
	
 	<!--  Custom filter to deny unwanted users even though registered -->
 	<bean id="blacklistFilter" class="com.ericsson.ipm.v1.security.authentication.filter.BlacklistFilter" />
 	
 	<!-- Custom filter for username and password. The real customization is done in the customAthenticationManager -->
 	<bean id="authenticationFilter" class="com.ericsson.ipm.v1.security.authentication.filter.CustomContextUsernamePasswordAuthenticationFilter"
 		p:sessionAuthenticationStrategy-ref="sas"
  		p:authenticationManager-ref="authenticationManager"
  		p:authenticationFailureHandler-ref="customContextAuthenticationFailureHandler"
  		p:authenticationSuccessHandler-ref="customContextAuthenticationSuccessHandler" />
  		
	<!-- Custom authentication manager. In order to authenticate, username and password must not be the same 
	<bean id="customAuthenticationManager" class="org.krams.tutorial.manager.CustomAuthenticationManager" />
 	-->
 	<!-- We just actually need to set the default failure url here -->
 	<bean id="customContextAuthenticationFailureHandler" class="com.ericsson.ipm.v1.security.authentication.handler.CustomContextAuthenticationFailureHandler"
 		p:defaultFailureUrl="/v1/public/login.html?error=true" />
 		
 	 <!-- We just actually need to set the default target url here  <property name="defaultManagerUrl" value="/v1/protected/orgChartDetails.html" />-->
 	<bean id="customContextAuthenticationSuccessHandler" class="com.ericsson.ipm.v1.security.authentication.handler.CustomContextAuthenticationSuccessHandler">
 				<property name="defaultTargetUrl" value="/v1/protected" />
				<property name="defaultAuthUrl" value="/v1/protected/ipmDashboard.html" />
				<property name="defaultManagerUrl" value="/v1/protected/managedPeopleDetails.html" />
				<property name="defaultApprovalPendingUrl" value="/v1/temp/conveyPendingStatus.action" />
				<property name="defaultSysAdminUrl" value="/v1/protected/extreme/loadUnapprovedUsers.action" />
				<property name="defaultGuestUrl" value="/v1/protected/external/loadRegistrationCompletionForm.action" />
 	
 	</bean>
 	
 	
 	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

	<bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy"
		p:maximumSessions="1" p:exceptionIfMaximumExceeded="true">
		<constructor-arg name="sessionRegistry" ref="sessionRegistry" />
	</bean>
 		
 	
 	<!-- The AuthenticationEntryPoint is responsible for redirecting the user to a particular page, like a login page,
 			whenever the server sends back a response requiring authentication -->
 	<!-- See Spring-Security Reference 5.4.1 for more info -->
 	<bean id="authenticationEntryPoint"  class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
	 	p:loginFormUrl="/v1/public/login.html"/>

	<!-- The tag below has no use but Spring Security needs it to autowire the parent property of 
			org.springframework.security.authentication.ProviderManager. Otherwise we get an error 
			A probable bug. This is still under investigation-->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="customContextAuthenticationProvider" />
	</security:authentication-manager>
	
	
	<bean id="customContextAuthenticationProvider" class="com.ericsson.ipm.v1.security.authentication.CustomContextAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService" />
	</bean>
	
	<bean id="userDetailsService" class="com.ericsson.ipm.v1.security.authentication.CustomContextUserDetailsService" />
	
	  <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg name="logoutSuccessHandler" ref="customContexSimpleUrlLogoutSuccessHandler" />
		<constructor-arg name="handlers">
		<list>
			<ref bean="securityContextLogoutHandler" />
			<!--  <ref bean="contextLogoutHandlerFilter" /> -->
		</list>
		</constructor-arg>
	<property name="filterProcessesUrl" value="/v1/public/logout.html" />
	</bean>

<!-- http://cyriltech.blogspot.in/2013/02/spring-logout-filter.html -->
	<bean id="customContexSimpleUrlLogoutSuccessHandler" name="customContexSimpleUrlLogoutSuccessHandler"
			class="com.ericsson.ipm.v1.security.authentication.handler.CustomContexSimpleUrlLogoutSuccessHandler" 
			p:defaultTargetUrl="/v1/public/login.html" />
			
	<!--  <bean id="contextLogoutHandlerFilter" name="contextLogoutHandlerFilter" 
	class="com.context.security.authentication.handler.CustomContextLogoutHandlerFilter" /> -->

	<bean id="securityContextLogoutHandler" name="securityContextLogoutHandler"
		class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<property name="invalidateHttpSession" value="true" />
	</bean>
	
</beans>